<?php
/**
 * @created Alexey Kutuzov <lexus27.khv@gmail.com>
 * @Project: php-text-activetype
 */
include '../vendor/autoload.php';


/**
 * В единственном виде объект Тип нам мало интересен
 * Важно понимать что значения будут вытаскиваться из наполненного текста.
 * Тип состоит из регулярного выражения и должен легко встраиваться
 * в шаблон состоящий из множества соседних типизированных плейсхолдеров в нем.
 * pattern: users/{id:int}/{array:array}
 * После компиляции
 * regexp: ~users/(?<ph_id>[+\-]?[1-9][0-9]*)/(?<ph_array>(?:[\w][\w\d]*)(?:,[\w][\w\d]*)*[,]?)~
 *
 * Тип по сути и его шаблон должен быть максимально абстрагирован,
 * и ни как не зависеть от других поставленный в общий шаблон, кусков
 *
 * Если тип использует в своем шаблоне, какие-то захватываемые маски,
 * это может повлиять на порядок позиционированных плейсхолдеров.
 *
 * Важно понимать что это влияет на вытаскивание значения маски в типе, до которого используется тип так-же с масками.
 *
 * В указанных регулярках, маски конечно используются без захватов, и выборка значений происходит по именованым маскам.
 *
 * Но если придется формировать тип вопреки этого, Мы должны будем при разборе смещать позицию последующих
 * типов на N число количества масок используемых до оперируемого типа.
 *
 * Нумерованные маски могут быть необходимы если:
 *  Нужно использовать повторение по маске, те-же рекурсии, self рекурсии для вложенности
 *  Нужно использовать condition группу с ссылкой на маску ,
 *  ПРИ ЭТОМ ТИП ДОЛЖЕН БЫТЬ АБСТРАГИРОВАН - тоесть он не знает какой точно глобальный индекс у его маски, будучи используемым в кастомном шаблоне
 *
 *
 * Для регулярок:
 *  Интеграция регулярки в другую регулярку, безопасная компоновка регулярки, Интеграция регулярок с наличием либо без /.../midifiers
 *  Подсчет количества капча групп, ре-анализ регулярки и реструктуризация выражений без потери управляющей логики в итоговом выражении
 *
 *
 * /.../i -> (?i:...)
 * (\1? ... | ... ) -> (\CTX_PREV+1? ... | ... ) где CTX_PREV это количество стоящих масок перед интегрированным шаблоном
 */

